
exercise 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a0  080041a0  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080041a0  080041a0  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041a0  080041a0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a0  080041a0  000051a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041a4  080041a4  000051a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080041a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000102c  20000014  080041bc  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  080041bc  00006040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e26f  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002836  00000000  00000000  000142ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00016ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9e  00000000  00000000  00017a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180aa  00000000  00000000  000185a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010465  00000000  00000000  00030650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e17f  00000000  00000000  00040ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cec34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  000cec78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d2a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080040ac 	.word	0x080040ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080040ac 	.word	0x080040ac

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000030 	.word	0x20000030
 800017c:	20000084 	.word	0x20000084

08000180 <AccessSharedData>:
void greenLEDFlashing(void const * argument);
void redLEDFlashing(void const * argument);
void orangeLEDFlashing(void const * argument);

/* USER CODE BEGIN PFP */
void AccessSharedData(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
    // Check and update StartFlag atomically
//	taskENTER_CRITICAL();

	if (osSemaphoreWait(CriticalResourceSemaphoreHandle, osWaitForever) == osOK) {
 8000184:	4b17      	ldr	r3, [pc, #92]	@ (80001e4 <AccessSharedData+0x64>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f04f 31ff 	mov.w	r1, #4294967295
 800018c:	4618      	mov	r0, r3
 800018e:	f001 fcb3 	bl	8001af8 <osSemaphoreWait>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d113      	bne.n	80001c0 <AccessSharedData+0x40>
		// Resource diperoleh, lakukan operasi pada resource bersama
		if (StartFlag == 1) {
 8000198:	4b13      	ldr	r3, [pc, #76]	@ (80001e8 <AccessSharedData+0x68>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d102      	bne.n	80001a6 <AccessSharedData+0x26>
			StartFlag = 0;  // Set Start flag ke Down
 80001a0:	4b11      	ldr	r3, [pc, #68]	@ (80001e8 <AccessSharedData+0x68>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		} else {

		}

		osDelay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001aa:	f001 fc5e 	bl	8001a6a <osDelay>
		StartFlag = 1;
 80001ae:	4b0e      	ldr	r3, [pc, #56]	@ (80001e8 <AccessSharedData+0x68>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	601a      	str	r2, [r3, #0]

		osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 80001b4:	4b0b      	ldr	r3, [pc, #44]	@ (80001e4 <AccessSharedData+0x64>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fceb 	bl	8001b94 <osSemaphoreRelease>

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	}

//    taskEXIT_CRITICAL();
}
 80001be:	e00f      	b.n	80001e0 <AccessSharedData+0x60>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001c6:	4809      	ldr	r0, [pc, #36]	@ (80001ec <AccessSharedData+0x6c>)
 80001c8:	f000 fd48 	bl	8000c5c <HAL_GPIO_WritePin>
		osDelay(1000);
 80001cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d0:	f001 fc4b 	bl	8001a6a <osDelay>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001da:	4804      	ldr	r0, [pc, #16]	@ (80001ec <AccessSharedData+0x6c>)
 80001dc:	f000 fd3e 	bl	8000c5c <HAL_GPIO_WritePin>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	2000029c 	.word	0x2000029c
 80001e8:	20000000 	.word	0x20000000
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b5b0      	push	{r4, r5, r7, lr}
 80001f2:	b09e      	sub	sp, #120	@ 0x78
 80001f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 faa3 	bl	8000740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f871 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f8b5 	bl	800036c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000202:	4b2e      	ldr	r3, [pc, #184]	@ (80002bc <main+0xcc>)
 8000204:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000208:	461d      	mov	r5, r3
 800020a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000216:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f001 fbd8 	bl	80019d2 <osThreadCreate>
 8000222:	4603      	mov	r3, r0
 8000224:	4a26      	ldr	r2, [pc, #152]	@ (80002c0 <main+0xd0>)
 8000226:	6013      	str	r3, [r2, #0]

  /* definition and creation of greenLEDTask */
  osThreadDef(greenLEDTask, greenLEDFlashing, osPriorityIdle, 0, 128);
 8000228:	4b26      	ldr	r3, [pc, #152]	@ (80002c4 <main+0xd4>)
 800022a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800022e:	461d      	mov	r5, r3
 8000230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  greenLEDTaskHandle = osThreadCreate(osThread(greenLEDTask), NULL);
 800023c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fbc5 	bl	80019d2 <osThreadCreate>
 8000248:	4603      	mov	r3, r0
 800024a:	4a1f      	ldr	r2, [pc, #124]	@ (80002c8 <main+0xd8>)
 800024c:	6013      	str	r3, [r2, #0]

  /* definition and creation of redLEDTask */
  osThreadDef(redLEDTask, redLEDFlashing, osPriorityIdle, 0, 128);
 800024e:	4b1f      	ldr	r3, [pc, #124]	@ (80002cc <main+0xdc>)
 8000250:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000254:	461d      	mov	r5, r3
 8000256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  redLEDTaskHandle = osThreadCreate(osThread(redLEDTask), NULL);
 8000262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f001 fbb2 	bl	80019d2 <osThreadCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a17      	ldr	r2, [pc, #92]	@ (80002d0 <main+0xe0>)
 8000272:	6013      	str	r3, [r2, #0]

  /* definition and creation of orangeLEDTask */
  osThreadDef(orangeLEDTask, orangeLEDFlashing, osPriorityIdle, 0, 128);
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <main+0xe4>)
 8000276:	f107 0408 	add.w	r4, r7, #8
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  orangeLEDTaskHandle = osThreadCreate(osThread(orangeLEDTask), NULL);
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fb9f 	bl	80019d2 <osThreadCreate>
 8000294:	4603      	mov	r3, r0
 8000296:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <main+0xe8>)
 8000298:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osSemaphoreDef(CriticalResourceSemaphore); CriticalResourceSemaphoreHandle =
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
  osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 80002a2:	463b      	mov	r3, r7
 80002a4:	2101      	movs	r1, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fbf3 	bl	8001a92 <osSemaphoreCreate>
 80002ac:	4603      	mov	r3, r0
  osSemaphoreDef(CriticalResourceSemaphore); CriticalResourceSemaphoreHandle =
 80002ae:	4a0b      	ldr	r2, [pc, #44]	@ (80002dc <main+0xec>)
 80002b0:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002b2:	f001 fb87 	bl	80019c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <main+0xc6>
 80002ba:	bf00      	nop
 80002bc:	080040d0 	.word	0x080040d0
 80002c0:	2000028c 	.word	0x2000028c
 80002c4:	080040fc 	.word	0x080040fc
 80002c8:	20000290 	.word	0x20000290
 80002cc:	08004124 	.word	0x08004124
 80002d0:	20000294 	.word	0x20000294
 80002d4:	08004150 	.word	0x08004150
 80002d8:	20000298 	.word	0x20000298
 80002dc:	2000029c 	.word	0x2000029c

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b090      	sub	sp, #64	@ 0x40
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2228      	movs	r2, #40	@ 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fea2 	bl	8004038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000302:	2301      	movs	r3, #1
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	2301      	movs	r3, #1
 8000312:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fcc9 	bl	8000cc0 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000334:	f000 f8f9 	bl	800052a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033c:	2302      	movs	r3, #2
 800033e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2102      	movs	r1, #2
 8000352:	4618      	mov	r0, r3
 8000354:	f000 ff36 	bl	80011c4 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800035e:	f000 f8e4 	bl	800052a <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3740      	adds	r7, #64	@ 0x40
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b2e      	ldr	r3, [pc, #184]	@ (800043c <MX_GPIO_Init+0xd0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a2d      	ldr	r2, [pc, #180]	@ (800043c <MX_GPIO_Init+0xd0>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b2b      	ldr	r3, [pc, #172]	@ (800043c <MX_GPIO_Init+0xd0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b28      	ldr	r3, [pc, #160]	@ (800043c <MX_GPIO_Init+0xd0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a27      	ldr	r2, [pc, #156]	@ (800043c <MX_GPIO_Init+0xd0>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b25      	ldr	r3, [pc, #148]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	4b22      	ldr	r3, [pc, #136]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a21      	ldr	r2, [pc, #132]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1f      	ldr	r3, [pc, #124]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0308 	and.w	r3, r3, #8
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a1b      	ldr	r2, [pc, #108]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_GPIO_Init+0xd0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80003e6:	4816      	ldr	r0, [pc, #88]	@ (8000440 <MX_GPIO_Init+0xd4>)
 80003e8:	f000 fc38 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_ORANGE_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80003f2:	4814      	ldr	r0, [pc, #80]	@ (8000444 <MX_GPIO_Init+0xd8>)
 80003f4:	f000 fc32 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80003f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	480b      	ldr	r0, [pc, #44]	@ (8000440 <MX_GPIO_Init+0xd4>)
 8000412:	f000 faa7 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_ORANGE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_ORANGE_Pin;
 8000416:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_GPIO_Init+0xd8>)
 8000430:	f000 fa98 	bl	8000964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000
 8000444:	40010c00 	.word	0x40010c00

08000448 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f001 fb0a 	bl	8001a6a <osDelay>
 8000456:	e7fb      	b.n	8000450 <StartDefaultTask+0x8>

08000458 <greenLEDFlashing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_greenLEDFlashing */
void greenLEDFlashing(void const * argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN greenLEDFlashing */
  /* Infinite loop */
	for(;;)
	{
		// Turn on Green LED
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000466:	480c      	ldr	r0, [pc, #48]	@ (8000498 <greenLEDFlashing+0x40>)
 8000468:	f000 fbf8 	bl	8000c5c <HAL_GPIO_WritePin>
		greenTask = 1;
 800046c:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <greenLEDFlashing+0x44>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]

		// Try to access shared resource
		AccessSharedData();
 8000472:	f7ff fe85 	bl	8000180 <AccessSharedData>
		osDelay(200);
 8000476:	20c8      	movs	r0, #200	@ 0xc8
 8000478:	f001 faf7 	bl	8001a6a <osDelay>

		// Turn off Green LED
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000482:	4805      	ldr	r0, [pc, #20]	@ (8000498 <greenLEDFlashing+0x40>)
 8000484:	f000 fbea 	bl	8000c5c <HAL_GPIO_WritePin>
		greenTask = 0;
 8000488:	4b04      	ldr	r3, [pc, #16]	@ (800049c <greenLEDFlashing+0x44>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]

		osDelay(200);  // Wait before next cycle
 800048e:	20c8      	movs	r0, #200	@ 0xc8
 8000490:	f001 faeb 	bl	8001a6a <osDelay>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000494:	bf00      	nop
 8000496:	e7e3      	b.n	8000460 <greenLEDFlashing+0x8>
 8000498:	40011000 	.word	0x40011000
 800049c:	20000284 	.word	0x20000284

080004a0 <redLEDFlashing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_redLEDFlashing */
void redLEDFlashing(void const * argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN redLEDFlashing */
  /* Infinite loop */
	for(;;)
	{
		// Turn on Red LED
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004ae:	480d      	ldr	r0, [pc, #52]	@ (80004e4 <redLEDFlashing+0x44>)
 80004b0:	f000 fbd4 	bl	8000c5c <HAL_GPIO_WritePin>
		redTask = 1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <redLEDFlashing+0x48>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	601a      	str	r2, [r3, #0]

		// Try to access shared resource
		AccessSharedData();
 80004ba:	f7ff fe61 	bl	8000180 <AccessSharedData>
		osDelay(550);
 80004be:	f240 2026 	movw	r0, #550	@ 0x226
 80004c2:	f001 fad2 	bl	8001a6a <osDelay>

		// Turn off Red LED
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004cc:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <redLEDFlashing+0x44>)
 80004ce:	f000 fbc5 	bl	8000c5c <HAL_GPIO_WritePin>
		redTask = 0;
 80004d2:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <redLEDFlashing+0x48>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]

		osDelay(550);  // Wait before next cycle
 80004d8:	f240 2026 	movw	r0, #550	@ 0x226
 80004dc:	f001 fac5 	bl	8001a6a <osDelay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80004e0:	bf00      	nop
 80004e2:	e7e1      	b.n	80004a8 <redLEDFlashing+0x8>
 80004e4:	40011000 	.word	0x40011000
 80004e8:	20000288 	.word	0x20000288

080004ec <orangeLEDFlashing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_orangeLEDFlashing */
void orangeLEDFlashing(void const * argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN orangeLEDFlashing */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80004f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f8:	4803      	ldr	r0, [pc, #12]	@ (8000508 <orangeLEDFlashing+0x1c>)
 80004fa:	f000 fbc7 	bl	8000c8c <HAL_GPIO_TogglePin>
	  osDelay(50);  // Delay 50 ms untuk menghasilkan frekuensi 10 Hz
 80004fe:	2032      	movs	r0, #50	@ 0x32
 8000500:	f001 fab3 	bl	8001a6a <osDelay>
	  HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000504:	bf00      	nop
 8000506:	e7f5      	b.n	80004f4 <orangeLEDFlashing+0x8>
 8000508:	40010c00 	.word	0x40010c00

0800050c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800051c:	d101      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051e:	f000 f925 	bl	800076c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052e:	b672      	cpsid	i
}
 8000530:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000532:	bf00      	nop
 8000534:	e7fd      	b.n	8000532 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053e:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <HAL_MspInit+0x68>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <HAL_MspInit+0x68>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_MspInit+0x68>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a11      	ldr	r2, [pc, #68]	@ (80005a0 <HAL_MspInit+0x68>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	f06f 0001 	mvn.w	r0, #1
 8000576:	f000 f9ca 	bl	800090e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <HAL_MspInit+0x6c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <HAL_MspInit+0x6c>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010000 	.word	0x40010000

080005a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	@ 0x38
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80005be:	4b34      	ldr	r3, [pc, #208]	@ (8000690 <HAL_InitTick+0xe8>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a33      	ldr	r2, [pc, #204]	@ (8000690 <HAL_InitTick+0xe8>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <HAL_InitTick+0xe8>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005d6:	f107 0210 	add.w	r2, r7, #16
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 ff4b 	bl	800147c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005e6:	6a3b      	ldr	r3, [r7, #32]
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005f0:	f000 ff30 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 80005f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80005f6:	e004      	b.n	8000602 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005f8:	f000 ff2c 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 80005fc:	4603      	mov	r3, r0
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000604:	4a23      	ldr	r2, [pc, #140]	@ (8000694 <HAL_InitTick+0xec>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	0c9b      	lsrs	r3, r3, #18
 800060c:	3b01      	subs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <HAL_InitTick+0xf0>)
 8000612:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000616:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <HAL_InitTick+0xf0>)
 800061a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800061e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000620:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <HAL_InitTick+0xf0>)
 8000622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000624:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <HAL_InitTick+0xf0>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <HAL_InitTick+0xf0>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <HAL_InitTick+0xf0>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000638:	4817      	ldr	r0, [pc, #92]	@ (8000698 <HAL_InitTick+0xf0>)
 800063a:	f000 ff6d 	bl	8001518 <HAL_TIM_Base_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000644:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11b      	bne.n	8000684 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <HAL_InitTick+0xf0>)
 800064e:	f000 ffbb 	bl	80015c8 <HAL_TIM_Base_Start_IT>
 8000652:	4603      	mov	r3, r0
 8000654:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000658:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800065c:	2b00      	cmp	r3, #0
 800065e:	d111      	bne.n	8000684 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000660:	201c      	movs	r0, #28
 8000662:	f000 f970 	bl	8000946 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d808      	bhi.n	800067e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	201c      	movs	r0, #28
 8000672:	f000 f94c 	bl	800090e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000676:	4a09      	ldr	r2, [pc, #36]	@ (800069c <HAL_InitTick+0xf4>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	e002      	b.n	8000684 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000684:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000688:	4618      	mov	r0, r3
 800068a:	3738      	adds	r7, #56	@ 0x38
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	431bde83 	.word	0x431bde83
 8000698:	200002a0 	.word	0x200002a0
 800069c:	20000008 	.word	0x20000008

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <TIM2_IRQHandler+0x10>)
 80006da:	f000 ffc1 	bl	8001660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200002a0 	.word	0x200002a0

080006e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f4:	f7ff fff8 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006fa:	490c      	ldr	r1, [pc, #48]	@ (800072c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a09      	ldr	r2, [pc, #36]	@ (8000734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000710:	4c09      	ldr	r4, [pc, #36]	@ (8000738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f003 fc93 	bl	8004048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fd65 	bl	80001f0 <main>
  bx lr
 8000726:	4770      	bx	lr
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000730:	080041a8 	.word	0x080041a8
  ldr r2, =_sbss
 8000734:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000738:	20001040 	.word	0x20001040

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_Init+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <HAL_Init+0x28>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f8d1 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	200f      	movs	r0, #15
 8000758:	f7ff ff26 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff feec 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a03      	ldr	r2, [pc, #12]	@ (800078c <HAL_IncTick+0x20>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	2000000c 	.word	0x2000000c
 800078c:	200002e8 	.word	0x200002e8

08000790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	@ (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	200002e8 	.word	0x200002e8

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0b      	blt.n	8000832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	4906      	ldr	r1, [pc, #24]	@ (800083c <__NVIC_EnableIRQ+0x34>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	@ (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	@ (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	@ 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	@ 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff4f 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff64 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ffb2 	bl	8000894 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff81 	bl	8000840 <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff57 	bl	8000808 <__NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b480      	push	{r7}
 8000966:	b08b      	sub	sp, #44	@ 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e161      	b.n	8000c3c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000978:	2201      	movs	r2, #1
 800097a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	429a      	cmp	r2, r3
 8000992:	f040 8150 	bne.w	8000c36 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4a97      	ldr	r2, [pc, #604]	@ (8000bf8 <HAL_GPIO_Init+0x294>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d05e      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009a0:	4a95      	ldr	r2, [pc, #596]	@ (8000bf8 <HAL_GPIO_Init+0x294>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d875      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009a6:	4a95      	ldr	r2, [pc, #596]	@ (8000bfc <HAL_GPIO_Init+0x298>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d058      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009ac:	4a93      	ldr	r2, [pc, #588]	@ (8000bfc <HAL_GPIO_Init+0x298>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d86f      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009b2:	4a93      	ldr	r2, [pc, #588]	@ (8000c00 <HAL_GPIO_Init+0x29c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d052      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009b8:	4a91      	ldr	r2, [pc, #580]	@ (8000c00 <HAL_GPIO_Init+0x29c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d869      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009be:	4a91      	ldr	r2, [pc, #580]	@ (8000c04 <HAL_GPIO_Init+0x2a0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d04c      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009c4:	4a8f      	ldr	r2, [pc, #572]	@ (8000c04 <HAL_GPIO_Init+0x2a0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d863      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009ca:	4a8f      	ldr	r2, [pc, #572]	@ (8000c08 <HAL_GPIO_Init+0x2a4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d046      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009d0:	4a8d      	ldr	r2, [pc, #564]	@ (8000c08 <HAL_GPIO_Init+0x2a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d85d      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d82a      	bhi.n	8000a30 <HAL_GPIO_Init+0xcc>
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d859      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009de:	a201      	add	r2, pc, #4	@ (adr r2, 80009e4 <HAL_GPIO_Init+0x80>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a5f 	.word	0x08000a5f
 80009e8:	08000a39 	.word	0x08000a39
 80009ec:	08000a4b 	.word	0x08000a4b
 80009f0:	08000a8d 	.word	0x08000a8d
 80009f4:	08000a93 	.word	0x08000a93
 80009f8:	08000a93 	.word	0x08000a93
 80009fc:	08000a93 	.word	0x08000a93
 8000a00:	08000a93 	.word	0x08000a93
 8000a04:	08000a93 	.word	0x08000a93
 8000a08:	08000a93 	.word	0x08000a93
 8000a0c:	08000a93 	.word	0x08000a93
 8000a10:	08000a93 	.word	0x08000a93
 8000a14:	08000a93 	.word	0x08000a93
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000a93 	.word	0x08000a93
 8000a20:	08000a93 	.word	0x08000a93
 8000a24:	08000a93 	.word	0x08000a93
 8000a28:	08000a41 	.word	0x08000a41
 8000a2c:	08000a55 	.word	0x08000a55
 8000a30:	4a76      	ldr	r2, [pc, #472]	@ (8000c0c <HAL_GPIO_Init+0x2a8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a36:	e02c      	b.n	8000a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e029      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e024      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	623b      	str	r3, [r7, #32]
          break;
 8000a52:	e01f      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	330c      	adds	r3, #12
 8000a5a:	623b      	str	r3, [r7, #32]
          break;
 8000a5c:	e01a      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a66:	2304      	movs	r3, #4
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e013      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d105      	bne.n	8000a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	611a      	str	r2, [r3, #16]
          break;
 8000a7e:	e009      	b.n	8000a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a80:	2308      	movs	r3, #8
 8000a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	615a      	str	r2, [r3, #20]
          break;
 8000a8a:	e003      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          break;
 8000a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2bff      	cmp	r3, #255	@ 0xff
 8000a98:	d801      	bhi.n	8000a9e <HAL_GPIO_Init+0x13a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	e001      	b.n	8000aa2 <HAL_GPIO_Init+0x13e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2bff      	cmp	r3, #255	@ 0xff
 8000aa8:	d802      	bhi.n	8000ab0 <HAL_GPIO_Init+0x14c>
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	e002      	b.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	3b08      	subs	r3, #8
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	210f      	movs	r1, #15
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	6a39      	ldr	r1, [r7, #32]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80a9 	beq.w	8000c36 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <HAL_GPIO_Init+0x2ac>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a49      	ldr	r2, [pc, #292]	@ (8000c10 <HAL_GPIO_Init+0x2ac>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b47      	ldr	r3, [pc, #284]	@ (8000c10 <HAL_GPIO_Init+0x2ac>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000afc:	4a45      	ldr	r2, [pc, #276]	@ (8000c14 <HAL_GPIO_Init+0x2b0>)
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	220f      	movs	r2, #15
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3d      	ldr	r2, [pc, #244]	@ (8000c18 <HAL_GPIO_Init+0x2b4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1e0>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c1c <HAL_GPIO_Init+0x2b8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1dc>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a3b      	ldr	r2, [pc, #236]	@ (8000c20 <HAL_GPIO_Init+0x2bc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1d8>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	@ (8000c14 <HAL_GPIO_Init+0x2b0>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	492b      	ldr	r1, [pc, #172]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4927      	ldr	r1, [pc, #156]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	4921      	ldr	r1, [pc, #132]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491d      	ldr	r1, [pc, #116]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4917      	ldr	r1, [pc, #92]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4913      	ldr	r1, [pc, #76]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d01f      	beq.n	8000c28 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e01f      	b.n	8000c36 <HAL_GPIO_Init+0x2d2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4909      	ldr	r1, [pc, #36]	@ (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	3301      	adds	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c42:	fa22 f303 	lsr.w	r3, r2, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f ae96 	bne.w	8000978 <HAL_GPIO_Init+0x14>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	372c      	adds	r7, #44	@ 0x2c
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	787b      	ldrb	r3, [r7, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c78:	e003      	b.n	8000c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	611a      	str	r2, [r3, #16]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	041a      	lsls	r2, r3, #16
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43d9      	mvns	r1, r3
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	400b      	ands	r3, r1
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e272      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8087 	beq.w	8000dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b92      	ldr	r3, [pc, #584]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d00c      	beq.n	8000d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cec:	4b8f      	ldr	r3, [pc, #572]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d112      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
 8000cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d04:	d10b      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	4b89      	ldr	r3, [pc, #548]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d06c      	beq.n	8000dec <HAL_RCC_OscConfig+0x12c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d168      	bne.n	8000dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e24c      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x76>
 8000d28:	4b80      	ldr	r3, [pc, #512]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e02e      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a7a      	ldr	r2, [pc, #488]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b78      	ldr	r3, [pc, #480]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a77      	ldr	r2, [pc, #476]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e01d      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0xbc>
 8000d62:	4b72      	ldr	r3, [pc, #456]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a71      	ldr	r2, [pc, #452]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6e      	ldr	r2, [pc, #440]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a67      	ldr	r2, [pc, #412]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fcf8 	bl	8000790 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fcf4 	bl	8000790 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	@ 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e200      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0xe4>
 8000dc2:	e014      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fce4 	bl	8000790 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fce0 	bl	8000790 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	@ 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1ec      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b53      	ldr	r3, [pc, #332]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x10c>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d063      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e06:	4b49      	ldr	r3, [pc, #292]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d11c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
 8000e12:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e1c0      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4939      	ldr	r1, [pc, #228]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e03a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fc99 	bl	8000790 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc95 	bl	8000790 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1a1      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4927      	ldr	r1, [pc, #156]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fc78 	bl	8000790 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc74 	bl	8000790 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e180      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03a      	beq.n	8000f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc58 	bl	8000790 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fc54 	bl	8000790 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e160      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 faea 	bl	80014dc <RCC_Delay>
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fc3e 	bl	8000790 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f16:	e00f      	b.n	8000f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc3a 	bl	8000790 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d908      	bls.n	8000f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e146      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42420000 	.word	0x42420000
 8000f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b92      	ldr	r3, [pc, #584]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e9      	bne.n	8000f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a6 	beq.w	800109e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b8b      	ldr	r3, [pc, #556]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10d      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b88      	ldr	r3, [pc, #544]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a87      	ldr	r2, [pc, #540]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b85      	ldr	r3, [pc, #532]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b82      	ldr	r3, [pc, #520]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fbfb 	bl	8000790 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9e:	f7ff fbf7 	bl	8000790 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	@ 0x64
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e103      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x312>
 8000fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e02d      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x334>
 8000fda:	4b6a      	ldr	r3, [pc, #424]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a69      	ldr	r2, [pc, #420]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a66      	ldr	r2, [pc, #408]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	e01c      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x356>
 8000ffc:	4b61      	ldr	r3, [pc, #388]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a60      	ldr	r2, [pc, #384]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	4b5e      	ldr	r3, [pc, #376]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a5d      	ldr	r2, [pc, #372]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	e00b      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8001016:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a5a      	ldr	r2, [pc, #360]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b58      	ldr	r3, [pc, #352]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a57      	ldr	r2, [pc, #348]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fbab 	bl	8000790 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fba7 	bl	8000790 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0b1      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ee      	beq.n	800103e <HAL_RCC_OscConfig+0x37e>
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb95 	bl	8000790 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fb91 	bl	8000790 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e09b      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ee      	bne.n	800106a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d105      	bne.n	800109e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8087 	beq.w	80011b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a8:	4b36      	ldr	r3, [pc, #216]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d061      	beq.n	8001178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d146      	bne.n	800114a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010bc:	4b33      	ldr	r3, [pc, #204]	@ (800118c <HAL_RCC_OscConfig+0x4cc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb65 	bl	8000790 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fb61 	bl	8000790 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e06d      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4921      	ldr	r1, [pc, #132]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a19      	ldr	r1, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	430b      	orrs	r3, r1
 8001116:	491b      	ldr	r1, [pc, #108]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_RCC_OscConfig+0x4cc>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fb35 	bl	8000790 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fb31 	bl	8000790 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e03d      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x46a>
 8001148:	e035      	b.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_RCC_OscConfig+0x4cc>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb1e 	bl	8000790 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fb1a 	bl	8000790 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e026      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x498>
 8001176:	e01e      	b.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d107      	bne.n	8001190 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e019      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
 8001184:	40021000 	.word	0x40021000
 8001188:	40007000 	.word	0x40007000
 800118c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_RCC_OscConfig+0x500>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0d0      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d910      	bls.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b67      	ldr	r3, [pc, #412]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4965      	ldr	r1, [pc, #404]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b8      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800122a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4b53      	ldr	r3, [pc, #332]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494d      	ldr	r1, [pc, #308]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d040      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d115      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07f      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001282:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e073      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06b      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a2:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f023 0203 	bic.w	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4936      	ldr	r1, [pc, #216]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fa6c 	bl	8000790 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012bc:	f7ff fa68 	bl	8000790 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e053      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 020c 	and.w	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1eb      	bne.n	80012bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d210      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 0207 	bic.w	r2, r3, #7
 80012fa:	4922      	ldr	r1, [pc, #136]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e032      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4916      	ldr	r1, [pc, #88]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490e      	ldr	r1, [pc, #56]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f821 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 8001356:	4602      	mov	r2, r0
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	490a      	ldr	r1, [pc, #40]	@ (800138c <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	5ccb      	ldrb	r3, [r1, r3]
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <HAL_RCC_ClockConfig+0x1cc>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1d0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f918 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000
 8001388:	40021000 	.word	0x40021000
 800138c:	08004174 	.word	0x08004174
 8001390:	20000004 	.word	0x20000004
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_RCC_GetSysClockFreq+0x94>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d002      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x30>
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d003      	beq.n	80013ce <HAL_RCC_GetSysClockFreq+0x36>
 80013c6:	e027      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ca:	613b      	str	r3, [r7, #16]
      break;
 80013cc:	e027      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	0c9b      	lsrs	r3, r3, #18
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_RCC_GetSysClockFreq+0x94>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	fbb2 f3f3 	udiv	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e004      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <HAL_RCC_GetSysClockFreq+0xa4>)
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	613b      	str	r3, [r7, #16]
      break;
 8001416:	e002      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 800141a:	613b      	str	r3, [r7, #16]
      break;
 800141c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800141e:	693b      	ldr	r3, [r7, #16]
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	007a1200 	.word	0x007a1200
 8001434:	0800418c 	.word	0x0800418c
 8001438:	0800419c 	.word	0x0800419c
 800143c:	003d0900 	.word	0x003d0900

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <HAL_RCC_GetHCLKFreq+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff2 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	@ (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	08004184 	.word	0x08004184

0800147c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	220f      	movs	r2, #15
 800148a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_RCC_GetClockConfig+0x58>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_RCC_GetClockConfig+0x58>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_RCC_GetClockConfig+0x58>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_RCC_GetClockConfig+0x58>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0207 	and.w	r2, r3, #7
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40022000 	.word	0x40022000

080014dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <RCC_Delay+0x34>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <RCC_Delay+0x38>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0a5b      	lsrs	r3, r3, #9
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014f8:	bf00      	nop
  }
  while (Delay --);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	60fa      	str	r2, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f9      	bne.n	80014f8 <RCC_Delay+0x1c>
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000004 	.word	0x20000004
 8001514:	10624dd3 	.word	0x10624dd3

08001518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e041      	b.n	80015ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f839 	bl	80015b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3304      	adds	r3, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f000 f996 	bl	8001888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d001      	beq.n	80015e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e035      	b.n	800164c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <HAL_TIM_Base_Start_IT+0x90>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d009      	beq.n	8001616 <HAL_TIM_Base_Start_IT+0x4e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800160a:	d004      	beq.n	8001616 <HAL_TIM_Base_Start_IT+0x4e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a12      	ldr	r2, [pc, #72]	@ (800165c <HAL_TIM_Base_Start_IT+0x94>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d111      	bne.n	800163a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b06      	cmp	r3, #6
 8001626:	d010      	beq.n	800164a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001638:	e007      	b.n	800164a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d020      	beq.n	80016c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01b      	beq.n	80016c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0202 	mvn.w	r2, #2
 8001694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8d1 	bl	8001852 <HAL_TIM_IC_CaptureCallback>
 80016b0:	e005      	b.n	80016be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f8c4 	bl	8001840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8d3 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d020      	beq.n	8001710 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f06f 0204 	mvn.w	r2, #4
 80016e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2202      	movs	r2, #2
 80016e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8ab 	bl	8001852 <HAL_TIM_IC_CaptureCallback>
 80016fc:	e005      	b.n	800170a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f89e 	bl	8001840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f8ad 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d020      	beq.n	800175c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01b      	beq.n	800175c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0208 	mvn.w	r2, #8
 800172c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f885 	bl	8001852 <HAL_TIM_IC_CaptureCallback>
 8001748:	e005      	b.n	8001756 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f878 	bl	8001840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f887 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d020      	beq.n	80017a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01b      	beq.n	80017a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0210 	mvn.w	r2, #16
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2208      	movs	r2, #8
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f85f 	bl	8001852 <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f852 	bl	8001840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f861 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f06f 0201 	mvn.w	r2, #1
 80017c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fea0 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8b9 	bl	8001962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00c      	beq.n	8001814 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800180c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f831 	bl	8001876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00c      	beq.n	8001838 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0220 	mvn.w	r2, #32
 8001830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f88c 	bl	8001950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <TIM_Base_SetConfig+0xc0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <TIM_Base_SetConfig+0x28>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a6:	d003      	beq.n	80018b0 <TIM_Base_SetConfig+0x28>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a28      	ldr	r2, [pc, #160]	@ (800194c <TIM_Base_SetConfig+0xc4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d108      	bne.n	80018c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a20      	ldr	r2, [pc, #128]	@ (8001948 <TIM_Base_SetConfig+0xc0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <TIM_Base_SetConfig+0x52>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d0:	d003      	beq.n	80018da <TIM_Base_SetConfig+0x52>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <TIM_Base_SetConfig+0xc4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d108      	bne.n	80018ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <TIM_Base_SetConfig+0xc0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d103      	bne.n	8001920 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f023 0201 	bic.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]
  }
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40000400 	.word	0x40000400

08001950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	2b84      	cmp	r3, #132	@ 0x84
 8001988:	d005      	beq.n	8001996 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800198a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	3303      	adds	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019a8:	f3ef 8305 	mrs	r3, IPSR
 80019ac:	607b      	str	r3, [r7, #4]
  return(result);
 80019ae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019c8:	f001 f924 	bl	8002c14 <vTaskStartScheduler>
  
  return osOK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d4:	b089      	sub	sp, #36	@ 0x24
 80019d6:	af04      	add	r7, sp, #16
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <osThreadCreate+0x54>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01c      	beq.n	8001a26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685c      	ldr	r4, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691e      	ldr	r6, [r3, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffb8 	bl	8001974 <makeFreeRtosPriority>
 8001a04:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a0e:	9202      	str	r2, [sp, #8]
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	9100      	str	r1, [sp, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4632      	mov	r2, r6
 8001a18:	4629      	mov	r1, r5
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f000 ff2d 	bl	800287a <xTaskCreateStatic>
 8001a20:	4603      	mov	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e01c      	b.n	8001a60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685c      	ldr	r4, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a32:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff9a 	bl	8001974 <makeFreeRtosPriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4632      	mov	r2, r6
 8001a4e:	4629      	mov	r1, r5
 8001a50:	4620      	mov	r0, r4
 8001a52:	f000 ff72 	bl	800293a <xTaskCreate>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d001      	beq.n	8001a60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e000      	b.n	8001a62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <osDelay+0x16>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	e000      	b.n	8001a82 <osDelay+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 f890 	bl	8002ba8 <vTaskDelay>
  
  return osOK;
 8001a88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af02      	add	r7, sp, #8
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00f      	beq.n	8001ac4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10a      	bne.n	8001ac0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	9200      	str	r2, [sp, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 f9bc 	bl	8001e34 <xQueueGenericCreateStatic>
 8001abc:	4603      	mov	r3, r0
 8001abe:	e016      	b.n	8001aee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e014      	b.n	8001aee <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d110      	bne.n	8001aec <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001aca:	2203      	movs	r2, #3
 8001acc:	2100      	movs	r1, #0
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fa2d 	bl	8001f2e <xQueueGenericCreate>
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <osSemaphoreCreate+0x56>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fa7e 	bl	8001fe4 <xQueueGenericSend>
      return sema;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	e000      	b.n	8001aee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001aec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	e03a      	b.n	8001b86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1a:	d103      	bne.n	8001b24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e009      	b.n	8001b38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <osSemaphoreWait+0x40>
      ticks = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001b38:	f7ff ff33 	bl	80019a2 <inHandlerMode>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d017      	beq.n	8001b72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	461a      	mov	r2, r3
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fcec 	bl	8002528 <xQueueReceiveFromISR>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8001b56:	23ff      	movs	r3, #255	@ 0xff
 8001b58:	e015      	b.n	8001b86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d011      	beq.n	8001b84 <osSemaphoreWait+0x8c>
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <osSemaphoreWait+0x98>)
 8001b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	e008      	b.n	8001b84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fbc7 	bl	8002308 <xQueueSemaphoreTake>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d001      	beq.n	8001b84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001b80:	23ff      	movs	r3, #255	@ 0xff
 8001b82:	e000      	b.n	8001b86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000ed04 	.word	0xe000ed04

08001b94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001ba4:	f7ff fefd 	bl	80019a2 <inHandlerMode>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d016      	beq.n	8001bdc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fb17 	bl	80021e8 <xQueueGiveFromISR>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d001      	beq.n	8001bc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001bc0:	23ff      	movs	r3, #255	@ 0xff
 8001bc2:	e017      	b.n	8001bf4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d013      	beq.n	8001bf2 <osSemaphoreRelease+0x5e>
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <osSemaphoreRelease+0x68>)
 8001bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	e00a      	b.n	8001bf2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f9fe 	bl	8001fe4 <xQueueGenericSend>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001bee:	23ff      	movs	r3, #255	@ 0xff
 8001bf0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	e000ed04 	.word	0xe000ed04

08001c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 0208 	add.w	r2, r3, #8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f103 0208 	add.w	r2, r3, #8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f103 0208 	add.w	r2, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb2:	d103      	bne.n	8001cbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e00c      	b.n	8001cd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e002      	b.n	8001cca <vListInsert+0x2e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d2f6      	bcs.n	8001cc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6892      	ldr	r2, [r2, #8]
 8001d22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6852      	ldr	r2, [r2, #4]
 8001d2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d103      	bne.n	8001d40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10b      	bne.n	8001d8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d8c:	f001 fe66 	bl	8003a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	441a      	add	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	441a      	add	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	22ff      	movs	r2, #255	@ 0xff
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	22ff      	movs	r2, #255	@ 0xff
 8001dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d114      	bne.n	8001e0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01a      	beq.n	8001e20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3310      	adds	r3, #16
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 f95a 	bl	80030a8 <xTaskRemoveFromEventList>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <xQueueGenericReset+0xd0>)
 8001dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	e009      	b.n	8001e20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3310      	adds	r3, #16
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fef5 	bl	8001c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3324      	adds	r3, #36	@ 0x24
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fef0 	bl	8001c00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e20:	f001 fe4c 	bl	8003abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000ed04 	.word	0xe000ed04

08001e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	@ 0x38
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <xQueueGenericCreateStatic+0x56>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <xQueueGenericCreateStatic+0x5a>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <xQueueGenericCreateStatic+0x5c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	623b      	str	r3, [r7, #32]
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <xQueueGenericCreateStatic+0x84>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <xQueueGenericCreateStatic+0x88>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <xQueueGenericCreateStatic+0x8a>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	61fb      	str	r3, [r7, #28]
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	e7fd      	b.n	8001ed6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001eda:	2348      	movs	r3, #72	@ 0x48
 8001edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b48      	cmp	r3, #72	@ 0x48
 8001ee2:	d00b      	beq.n	8001efc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	61bb      	str	r3, [r7, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001efc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f840 	bl	8001fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3730      	adds	r7, #48	@ 0x30
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b08a      	sub	sp, #40	@ 0x28
 8001f32:	af02      	add	r7, sp, #8
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10b      	bne.n	8001f5a <xQueueGenericCreate+0x2c>
	__asm volatile
 8001f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	613b      	str	r3, [r7, #16]
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	e7fd      	b.n	8001f56 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3348      	adds	r3, #72	@ 0x48
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fe79 	bl	8003c60 <pvPortMalloc>
 8001f6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d011      	beq.n	8001f9a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3348      	adds	r3, #72	@ 0x48
 8001f7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f805 	bl	8001fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e002      	b.n	8001fc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	69b8      	ldr	r0, [r7, #24]
 8001fd6:	f7ff fec3 	bl	8001d60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	@ 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <xQueueGenericSend+0x34>
	__asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <xQueueGenericSend+0x42>
 800201e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <xQueueGenericSend+0x46>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <xQueueGenericSend+0x48>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <xQueueGenericSend+0x64>
	__asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d103      	bne.n	8002056 <xQueueGenericSend+0x72>
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <xQueueGenericSend+0x76>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <xQueueGenericSend+0x78>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <xQueueGenericSend+0x94>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	623b      	str	r3, [r7, #32]
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002078:	f001 f9d6 	bl	8003428 <xTaskGetSchedulerState>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <xQueueGenericSend+0xa4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <xQueueGenericSend+0xa8>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <xQueueGenericSend+0xaa>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10b      	bne.n	80020aa <xQueueGenericSend+0xc6>
	__asm volatile
 8002092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	61fb      	str	r3, [r7, #28]
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	e7fd      	b.n	80020a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020aa:	f001 fcd7 	bl	8003a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <xQueueGenericSend+0xdc>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d129      	bne.n	8002114 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020c6:	f000 fac8 	bl	800265a <prvCopyDataToQueue>
 80020ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d6:	3324      	adds	r3, #36	@ 0x24
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 ffe5 	bl	80030a8 <xTaskRemoveFromEventList>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020e4:	4b3f      	ldr	r3, [pc, #252]	@ (80021e4 <xQueueGenericSend+0x200>)
 80020e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	e00a      	b.n	800210c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020fc:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <xQueueGenericSend+0x200>)
 80020fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800210c:	f001 fcd6 	bl	8003abc <vPortExitCritical>
				return pdPASS;
 8002110:	2301      	movs	r3, #1
 8002112:	e063      	b.n	80021dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800211a:	f001 fccf 	bl	8003abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800211e:	2300      	movs	r3, #0
 8002120:	e05c      	b.n	80021dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f81f 	bl	8003170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002132:	2301      	movs	r3, #1
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002136:	f001 fcc1 	bl	8003abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800213a:	f000 fdcd 	bl	8002cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800213e:	f001 fc8d 	bl	8003a5c <vPortEnterCritical>
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002148:	b25b      	sxtb	r3, r3
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d103      	bne.n	8002158 <xQueueGenericSend+0x174>
 8002150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800215e:	b25b      	sxtb	r3, r3
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d103      	bne.n	800216e <xQueueGenericSend+0x18a>
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800216e:	f001 fca5 	bl	8003abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002172:	1d3a      	adds	r2, r7, #4
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f001 f80e 	bl	800319c <xTaskCheckForTimeOut>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d124      	bne.n	80021d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002188:	f000 fb5f 	bl	800284a <prvIsQueueFull>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d018      	beq.n	80021c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002194:	3310      	adds	r3, #16
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f000 ff5e 	bl	800305c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021a2:	f000 faea 	bl	800277a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021a6:	f000 fda5 	bl	8002cf4 <xTaskResumeAll>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f af7c 	bne.w	80020aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <xQueueGenericSend+0x200>)
 80021b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	e772      	b.n	80020aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021c6:	f000 fad8 	bl	800277a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021ca:	f000 fd93 	bl	8002cf4 <xTaskResumeAll>
 80021ce:	e76c      	b.n	80020aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021d2:	f000 fad2 	bl	800277a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021d6:	f000 fd8d 	bl	8002cf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3738      	adds	r7, #56	@ 0x38
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	e000ed04 	.word	0xe000ed04

080021e8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	@ 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80021f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	623b      	str	r3, [r7, #32]
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00b      	beq.n	8002234 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	61fb      	str	r3, [r7, #28]
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <xQueueGiveFromISR+0x5c>
 800223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <xQueueGiveFromISR+0x60>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <xQueueGiveFromISR+0x62>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	61bb      	str	r3, [r7, #24]
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002266:	f001 fcbb 	bl	8003be0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800226a:	f3ef 8211 	mrs	r2, BASEPRI
 800226e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	617a      	str	r2, [r7, #20]
 8002280:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002282:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002292:	429a      	cmp	r2, r3
 8002294:	d22b      	bcs.n	80022ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800229c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d112      	bne.n	80022d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022bc:	3324      	adds	r3, #36	@ 0x24
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fef2 	bl	80030a8 <xTaskRemoveFromEventList>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00e      	beq.n	80022e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e007      	b.n	80022e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022dc:	3301      	adds	r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	b25a      	sxtb	r2, r3
 80022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80022e8:	2301      	movs	r3, #1
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ec:	e001      	b.n	80022f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002300:	4618      	mov	r0, r3
 8002302:	3738      	adds	r7, #56	@ 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002312:	2300      	movs	r3, #0
 8002314:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	623b      	str	r3, [r7, #32]
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800233c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	61fb      	str	r3, [r7, #28]
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800235c:	f001 f864 	bl	8003428 <xTaskGetSchedulerState>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <xQueueSemaphoreTake+0x64>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <xQueueSemaphoreTake+0x68>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <xQueueSemaphoreTake+0x6a>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	61bb      	str	r3, [r7, #24]
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	e7fd      	b.n	800238a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800238e:	f001 fb65 	bl	8003a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d024      	beq.n	80023e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80023ae:	f001 f9e7 	bl	8003780 <pvTaskIncrementMutexHeldCount>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00f      	beq.n	80023e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	3310      	adds	r3, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fe6f 	bl	80030a8 <xTaskRemoveFromEventList>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023d0:	4b54      	ldr	r3, [pc, #336]	@ (8002524 <xQueueSemaphoreTake+0x21c>)
 80023d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023e0:	f001 fb6c 	bl	8003abc <vPortExitCritical>
				return pdPASS;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e098      	b.n	800251a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d112      	bne.n	8002414 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	617b      	str	r3, [r7, #20]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800240c:	f001 fb56 	bl	8003abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002410:	2300      	movs	r3, #0
 8002412:	e082      	b.n	800251a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fea6 	bl	8003170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002424:	2301      	movs	r3, #1
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002428:	f001 fb48 	bl	8003abc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800242c:	f000 fc54 	bl	8002cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002430:	f001 fb14 	bl	8003a5c <vPortEnterCritical>
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800243a:	b25b      	sxtb	r3, r3
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d103      	bne.n	800244a <xQueueSemaphoreTake+0x142>
 8002442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002450:	b25b      	sxtb	r3, r3
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d103      	bne.n	8002460 <xQueueSemaphoreTake+0x158>
 8002458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002460:	f001 fb2c 	bl	8003abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002464:	463a      	mov	r2, r7
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fe95 	bl	800319c <xTaskCheckForTimeOut>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d132      	bne.n	80024de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800247a:	f000 f9d0 	bl	800281e <prvIsQueueEmpty>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d026      	beq.n	80024d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800248c:	f001 fae6 	bl	8003a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 ffe5 	bl	8003464 <xTaskPriorityInherit>
 800249a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800249c:	f001 fb0e 	bl	8003abc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	3324      	adds	r3, #36	@ 0x24
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fdd7 	bl	800305c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024b0:	f000 f963 	bl	800277a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024b4:	f000 fc1e 	bl	8002cf4 <xTaskResumeAll>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f af67 	bne.w	800238e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <xQueueSemaphoreTake+0x21c>)
 80024c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	e75d      	b.n	800238e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80024d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024d4:	f000 f951 	bl	800277a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024d8:	f000 fc0c 	bl	8002cf4 <xTaskResumeAll>
 80024dc:	e757      	b.n	800238e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80024de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024e0:	f000 f94b 	bl	800277a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024e4:	f000 fc06 	bl	8002cf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024ea:	f000 f998 	bl	800281e <prvIsQueueEmpty>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f43f af4c 	beq.w	800238e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80024fc:	f001 faae 	bl	8003a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002500:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002502:	f000 f893 	bl	800262c <prvGetDisinheritPriorityAfterTimeout>
 8002506:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f8a6 	bl	8003660 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002514:	f001 fad2 	bl	8003abc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002518:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800251a:	4618      	mov	r0, r3
 800251c:	3738      	adds	r7, #56	@ 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08e      	sub	sp, #56	@ 0x38
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	623b      	str	r3, [r7, #32]
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	e7fd      	b.n	8002552 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <xQueueReceiveFromISR+0x3c>
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <xQueueReceiveFromISR+0x40>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <xQueueReceiveFromISR+0x42>
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	61fb      	str	r3, [r7, #28]
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	e7fd      	b.n	8002582 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002586:	f001 fb2b 	bl	8003be0 <vPortValidateInterruptPriority>
	__asm volatile
 800258a:	f3ef 8211 	mrs	r2, BASEPRI
 800258e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	61ba      	str	r2, [r7, #24]
 80025a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80025a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d02f      	beq.n	8002612 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025c0:	f000 f8b5 	bl	800272e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80025cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d112      	bne.n	80025fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	3310      	adds	r3, #16
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fd60 	bl	80030a8 <xTaskRemoveFromEventList>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00e      	beq.n	800260c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e007      	b.n	800260c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80025fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002600:	3301      	adds	r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	b25a      	sxtb	r2, r3
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800260c:	2301      	movs	r3, #1
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002610:	e001      	b.n	8002616 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	@ 0x34
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	613b      	str	r3, [r7, #16]
	__asm volatile
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f383 8811 	msr	BASEPRI, r3
}
 8002620:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002624:	4618      	mov	r0, r3
 8002626:	3738      	adds	r7, #56	@ 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d006      	beq.n	800264a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e001      	b.n	800264e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800264e:	68fb      	ldr	r3, [r7, #12]
	}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d14d      	bne.n	800271c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 ff63 	bl	8003550 <xTaskPriorityDisinherit>
 800268a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	e043      	b.n	800271c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6858      	ldr	r0, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	461a      	mov	r2, r3
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	f001 fcf3 	bl	8004090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	441a      	add	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d32b      	bcc.n	800271c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e026      	b.n	800271c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	68d8      	ldr	r0, [r3, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	461a      	mov	r2, r3
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	f001 fcd9 	bl	8004090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	425b      	negs	r3, r3
 80026e8:	441a      	add	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d207      	bcs.n	800270a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	425b      	negs	r3, r3
 8002704:	441a      	add	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d105      	bne.n	800271c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3b01      	subs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002724:	697b      	ldr	r3, [r7, #20]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	441a      	add	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d303      	bcc.n	8002762 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68d9      	ldr	r1, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	461a      	mov	r2, r3
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f001 fc8f 	bl	8004090 <memcpy>
	}
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002782:	f001 f96b 	bl	8003a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800278c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800278e:	e011      	b.n	80027b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3324      	adds	r3, #36	@ 0x24
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fc83 	bl	80030a8 <xTaskRemoveFromEventList>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027a8:	f000 fd5c 	bl	8003264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	dce9      	bgt.n	8002790 <prvUnlockQueue+0x16>
 80027bc:	e000      	b.n	80027c0 <prvUnlockQueue+0x46>
					break;
 80027be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	22ff      	movs	r2, #255	@ 0xff
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027c8:	f001 f978 	bl	8003abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027cc:	f001 f946 	bl	8003a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d8:	e011      	b.n	80027fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3310      	adds	r3, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fc5e 	bl	80030a8 <xTaskRemoveFromEventList>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027f2:	f000 fd37 	bl	8003264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027f6:	7bbb      	ldrb	r3, [r7, #14]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002802:	2b00      	cmp	r3, #0
 8002804:	dce9      	bgt.n	80027da <prvUnlockQueue+0x60>
 8002806:	e000      	b.n	800280a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002808:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	22ff      	movs	r2, #255	@ 0xff
 800280e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002812:	f001 f953 	bl	8003abc <vPortExitCritical>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002826:	f001 f919 	bl	8003a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002832:	2301      	movs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e001      	b.n	800283c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800283c:	f001 f93e 	bl	8003abc <vPortExitCritical>

	return xReturn;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002852:	f001 f903 	bl	8003a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285e:	429a      	cmp	r2, r3
 8002860:	d102      	bne.n	8002868 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002862:	2301      	movs	r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e001      	b.n	800286c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800286c:	f001 f926 	bl	8003abc <vPortExitCritical>

	return xReturn;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08e      	sub	sp, #56	@ 0x38
 800287e:	af04      	add	r7, sp, #16
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	623b      	str	r3, [r7, #32]
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	61fb      	str	r3, [r7, #28]
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028c4:	2354      	movs	r3, #84	@ 0x54
 80028c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b54      	cmp	r3, #84	@ 0x54
 80028cc:	d00b      	beq.n	80028e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	61bb      	str	r3, [r7, #24]
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	e7fd      	b.n	80028e2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01e      	beq.n	800292c <xTaskCreateStatic+0xb2>
 80028ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	2202      	movs	r2, #2
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002906:	2300      	movs	r3, #0
 8002908:	9303      	str	r3, [sp, #12]
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	9302      	str	r3, [sp, #8]
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f850 	bl	80029c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002926:	f000 f8d5 	bl	8002ad4 <prvAddNewTaskToReadyList>
 800292a:	e001      	b.n	8002930 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002930:	697b      	ldr	r3, [r7, #20]
	}
 8002932:	4618      	mov	r0, r3
 8002934:	3728      	adds	r7, #40	@ 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800293a:	b580      	push	{r7, lr}
 800293c:	b08c      	sub	sp, #48	@ 0x30
 800293e:	af04      	add	r7, sp, #16
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f986 	bl	8003c60 <pvPortMalloc>
 8002954:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800295c:	2054      	movs	r0, #84	@ 0x54
 800295e:	f001 f97f 	bl	8003c60 <pvPortMalloc>
 8002962:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002970:	e005      	b.n	800297e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f001 fa42 	bl	8003dfc <vPortFree>
 8002978:	e001      	b.n	800297e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800298c:	88fa      	ldrh	r2, [r7, #6]
 800298e:	2300      	movs	r3, #0
 8002990:	9303      	str	r3, [sp, #12]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f80e 	bl	80029c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029a8:	69f8      	ldr	r0, [r7, #28]
 80029aa:	f000 f893 	bl	8002ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e002      	b.n	80029ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029ba:	69bb      	ldr	r3, [r7, #24]
	}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029dc:	3b01      	subs	r3, #1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	617b      	str	r3, [r7, #20]
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	e7fd      	b.n	8002a0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01f      	beq.n	8002a54 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e012      	b.n	8002a40 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	7819      	ldrb	r1, [r3, #0]
 8002a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	3334      	adds	r3, #52	@ 0x34
 8002a2a:	460a      	mov	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	d9e9      	bls.n	8002a1a <prvInitialiseNewTask+0x56>
 8002a46:	e000      	b.n	8002a4a <prvInitialiseNewTask+0x86>
			{
				break;
 8002a48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a52:	e003      	b.n	8002a5c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d901      	bls.n	8002a66 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a62:	2306      	movs	r3, #6
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	2200      	movs	r2, #0
 8002a76:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f8de 	bl	8001c3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	3318      	adds	r3, #24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f8d9 	bl	8001c3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	f1c3 0207 	rsb	r2, r3, #7
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	69b8      	ldr	r0, [r7, #24]
 8002ab6:	f000 fedd 	bl	8003874 <pxPortInitialiseStack>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002acc:	bf00      	nop
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002adc:	f000 ffbe 	bl	8003a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b8c <prvAddNewTaskToReadyList+0xb8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a29      	ldr	r2, [pc, #164]	@ (8002b8c <prvAddNewTaskToReadyList+0xb8>)
 8002ae8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002aea:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <prvAddNewTaskToReadyList+0xbc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002af2:	4a27      	ldr	r2, [pc, #156]	@ (8002b90 <prvAddNewTaskToReadyList+0xbc>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002af8:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <prvAddNewTaskToReadyList+0xb8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d110      	bne.n	8002b22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b00:	f000 fbd4 	bl	80032ac <prvInitialiseTaskLists>
 8002b04:	e00d      	b.n	8002b22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b06:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <prvAddNewTaskToReadyList+0xc0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b0e:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <prvAddNewTaskToReadyList+0xbc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d802      	bhi.n	8002b22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <prvAddNewTaskToReadyList+0xbc>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <prvAddNewTaskToReadyList+0xc4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <prvAddNewTaskToReadyList+0xc4>)
 8002b2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <prvAddNewTaskToReadyList+0xc8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	4a18      	ldr	r2, [pc, #96]	@ (8002b9c <prvAddNewTaskToReadyList+0xc8>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <prvAddNewTaskToReadyList+0xcc>)
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7ff f87e 	bl	8001c56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b5a:	f000 ffaf 	bl	8003abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <prvAddNewTaskToReadyList+0xc0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00e      	beq.n	8002b84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <prvAddNewTaskToReadyList+0xbc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d207      	bcs.n	8002b84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <prvAddNewTaskToReadyList+0xd0>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200003ec 	.word	0x200003ec
 8002b90:	200002ec 	.word	0x200002ec
 8002b94:	200003f8 	.word	0x200003f8
 8002b98:	20000408 	.word	0x20000408
 8002b9c:	200003f4 	.word	0x200003f4
 8002ba0:	200002f0 	.word	0x200002f0
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bba:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <vTaskDelay+0x64>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <vTaskDelay+0x32>
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	60bb      	str	r3, [r7, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	e7fd      	b.n	8002bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bda:	f000 f87d 	bl	8002cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bde:	2100      	movs	r1, #0
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fde1 	bl	80037a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002be6:	f000 f885 	bl	8002cf4 <xTaskResumeAll>
 8002bea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <vTaskDelay+0x68>)
 8002bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000414 	.word	0x20000414
 8002c10:	e000ed04 	.word	0xe000ed04

08002c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	@ 0x28
 8002c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c22:	463a      	mov	r2, r7
 8002c24:	1d39      	adds	r1, r7, #4
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fa90 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c30:	6839      	ldr	r1, [r7, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	9202      	str	r2, [sp, #8]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	460a      	mov	r2, r1
 8002c42:	491f      	ldr	r1, [pc, #124]	@ (8002cc0 <vTaskStartScheduler+0xac>)
 8002c44:	481f      	ldr	r0, [pc, #124]	@ (8002cc4 <vTaskStartScheduler+0xb0>)
 8002c46:	f7ff fe18 	bl	800287a <xTaskCreateStatic>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <vTaskStartScheduler+0xb4>)
 8002c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <vTaskStartScheduler+0xb4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e001      	b.n	8002c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d116      	bne.n	8002c96 <vTaskStartScheduler+0x82>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	613b      	str	r3, [r7, #16]
}
 8002c7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <vTaskStartScheduler+0xb8>)
 8002c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <vTaskStartScheduler+0xbc>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <vTaskStartScheduler+0xc0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c90:	f000 fe72 	bl	8003978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c94:	e00f      	b.n	8002cb6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d10b      	bne.n	8002cb6 <vTaskStartScheduler+0xa2>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60fb      	str	r3, [r7, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <vTaskStartScheduler+0x9e>
}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	0800416c 	.word	0x0800416c
 8002cc4:	0800327d 	.word	0x0800327d
 8002cc8:	20000410 	.word	0x20000410
 8002ccc:	2000040c 	.word	0x2000040c
 8002cd0:	200003f8 	.word	0x200003f8
 8002cd4:	200003f0 	.word	0x200003f0

08002cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002cdc:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <vTaskSuspendAll+0x18>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a03      	ldr	r2, [pc, #12]	@ (8002cf0 <vTaskSuspendAll+0x18>)
 8002ce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000414 	.word	0x20000414

08002cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d02:	4b42      	ldr	r3, [pc, #264]	@ (8002e0c <xTaskResumeAll+0x118>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <xTaskResumeAll+0x2e>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	603b      	str	r3, [r7, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	e7fd      	b.n	8002d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d22:	f000 fe9b 	bl	8003a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d26:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <xTaskResumeAll+0x118>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	4a37      	ldr	r2, [pc, #220]	@ (8002e0c <xTaskResumeAll+0x118>)
 8002d2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d30:	4b36      	ldr	r3, [pc, #216]	@ (8002e0c <xTaskResumeAll+0x118>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d161      	bne.n	8002dfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d38:	4b35      	ldr	r3, [pc, #212]	@ (8002e10 <xTaskResumeAll+0x11c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05d      	beq.n	8002dfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d40:	e02e      	b.n	8002da0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d42:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <xTaskResumeAll+0x120>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3318      	adds	r3, #24
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ffdc 	bl	8001d0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe ffd7 	bl	8001d0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <xTaskResumeAll+0x124>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e18 <xTaskResumeAll+0x124>)
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <xTaskResumeAll+0x128>)
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f7fe ff65 	bl	8001c56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d90:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <xTaskResumeAll+0x12c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <xTaskResumeAll+0x130>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002da0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e14 <xTaskResumeAll+0x120>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1cc      	bne.n	8002d42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dae:	f000 fb1b 	bl	80033e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <xTaskResumeAll+0x134>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dbe:	f000 f837 	bl	8002e30 <xTaskIncrementTick>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002dc8:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <xTaskResumeAll+0x130>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f1      	bne.n	8002dbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002dda:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <xTaskResumeAll+0x134>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002de0:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <xTaskResumeAll+0x130>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <xTaskResumeAll+0x138>)
 8002dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dfc:	f000 fe5e 	bl	8003abc <vPortExitCritical>

	return xAlreadyYielded;
 8002e00:	68bb      	ldr	r3, [r7, #8]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000414 	.word	0x20000414
 8002e10:	200003ec 	.word	0x200003ec
 8002e14:	200003ac 	.word	0x200003ac
 8002e18:	200003f4 	.word	0x200003f4
 8002e1c:	200002f0 	.word	0x200002f0
 8002e20:	200002ec 	.word	0x200002ec
 8002e24:	20000400 	.word	0x20000400
 8002e28:	200003fc 	.word	0x200003fc
 8002e2c:	e000ed04 	.word	0xe000ed04

08002e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f78 <xTaskIncrementTick+0x148>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 808f 	bne.w	8002f62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e44:	4b4d      	ldr	r3, [pc, #308]	@ (8002f7c <xTaskIncrementTick+0x14c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f7c <xTaskIncrementTick+0x14c>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d121      	bne.n	8002e9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e58:	4b49      	ldr	r3, [pc, #292]	@ (8002f80 <xTaskIncrementTick+0x150>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	603b      	str	r3, [r7, #0]
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	e7fd      	b.n	8002e76 <xTaskIncrementTick+0x46>
 8002e7a:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <xTaskIncrementTick+0x150>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	4b40      	ldr	r3, [pc, #256]	@ (8002f84 <xTaskIncrementTick+0x154>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3e      	ldr	r2, [pc, #248]	@ (8002f80 <xTaskIncrementTick+0x150>)
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4a3e      	ldr	r2, [pc, #248]	@ (8002f84 <xTaskIncrementTick+0x154>)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <xTaskIncrementTick+0x158>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a3c      	ldr	r2, [pc, #240]	@ (8002f88 <xTaskIncrementTick+0x158>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	f000 faa6 	bl	80033e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f8c <xTaskIncrementTick+0x15c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d348      	bcc.n	8002f38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea6:	4b36      	ldr	r3, [pc, #216]	@ (8002f80 <xTaskIncrementTick+0x150>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb0:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <xTaskIncrementTick+0x15c>)
 8002eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb6:	601a      	str	r2, [r3, #0]
					break;
 8002eb8:	e03e      	b.n	8002f38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eba:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <xTaskIncrementTick+0x150>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d203      	bcs.n	8002eda <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f8c <xTaskIncrementTick+0x15c>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ed8:	e02e      	b.n	8002f38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe ff14 	bl	8001d0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3318      	adds	r3, #24
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe ff0b 	bl	8001d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	2201      	movs	r2, #1
 8002efc:	409a      	lsls	r2, r3
 8002efe:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <xTaskIncrementTick+0x160>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <xTaskIncrementTick+0x160>)
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4a1f      	ldr	r2, [pc, #124]	@ (8002f94 <xTaskIncrementTick+0x164>)
 8002f16:	441a      	add	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f7fe fe99 	bl	8001c56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <xTaskIncrementTick+0x168>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3b9      	bcc.n	8002ea6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f36:	e7b6      	b.n	8002ea6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f38:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <xTaskIncrementTick+0x168>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3e:	4915      	ldr	r1, [pc, #84]	@ (8002f94 <xTaskIncrementTick+0x164>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d901      	bls.n	8002f54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <xTaskIncrementTick+0x16c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e004      	b.n	8002f6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <xTaskIncrementTick+0x170>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <xTaskIncrementTick+0x170>)
 8002f6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f6c:	697b      	ldr	r3, [r7, #20]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000414 	.word	0x20000414
 8002f7c:	200003f0 	.word	0x200003f0
 8002f80:	200003a4 	.word	0x200003a4
 8002f84:	200003a8 	.word	0x200003a8
 8002f88:	20000404 	.word	0x20000404
 8002f8c:	2000040c 	.word	0x2000040c
 8002f90:	200003f4 	.word	0x200003f4
 8002f94:	200002f0 	.word	0x200002f0
 8002f98:	200002ec 	.word	0x200002ec
 8002f9c:	20000400 	.word	0x20000400
 8002fa0:	200003fc 	.word	0x200003fc

08002fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002faa:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <vTaskSwitchContext+0xa4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	@ (800304c <vTaskSwitchContext+0xa8>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fb8:	e040      	b.n	800303c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002fba:	4b24      	ldr	r3, [pc, #144]	@ (800304c <vTaskSwitchContext+0xa8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <vTaskSwitchContext+0xac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	f1c3 031f 	rsb	r3, r3, #31
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	491f      	ldr	r1, [pc, #124]	@ (8003054 <vTaskSwitchContext+0xb0>)
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	607b      	str	r3, [r7, #4]
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	e7fd      	b.n	8002ffe <vTaskSwitchContext+0x5a>
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <vTaskSwitchContext+0xb0>)
 800300e:	4413      	add	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	3308      	adds	r3, #8
 8003024:	429a      	cmp	r2, r3
 8003026:	d104      	bne.n	8003032 <vTaskSwitchContext+0x8e>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <vTaskSwitchContext+0xb4>)
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000414 	.word	0x20000414
 800304c:	20000400 	.word	0x20000400
 8003050:	200003f4 	.word	0x200003f4
 8003054:	200002f0 	.word	0x200002f0
 8003058:	200002ec 	.word	0x200002ec

0800305c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	60fb      	str	r3, [r7, #12]
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <vTaskPlaceOnEventList+0x48>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3318      	adds	r3, #24
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fe fe05 	bl	8001c9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003092:	2101      	movs	r1, #1
 8003094:	6838      	ldr	r0, [r7, #0]
 8003096:	f000 fb87 	bl	80037a8 <prvAddCurrentTaskToDelayedList>
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200002ec 	.word	0x200002ec

080030a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	60fb      	str	r3, [r7, #12]
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	3318      	adds	r3, #24
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fe16 	bl	8001d0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <xTaskRemoveFromEventList+0xb0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11c      	bne.n	8003122 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe fe0d 	bl	8001d0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	2201      	movs	r2, #1
 80030f8:	409a      	lsls	r2, r3
 80030fa:	4b18      	ldr	r3, [pc, #96]	@ (800315c <xTaskRemoveFromEventList+0xb4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	4a16      	ldr	r2, [pc, #88]	@ (800315c <xTaskRemoveFromEventList+0xb4>)
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <xTaskRemoveFromEventList+0xb8>)
 8003112:	441a      	add	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	3304      	adds	r3, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7fe fd9b 	bl	8001c56 <vListInsertEnd>
 8003120:	e005      	b.n	800312e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3318      	adds	r3, #24
 8003126:	4619      	mov	r1, r3
 8003128:	480e      	ldr	r0, [pc, #56]	@ (8003164 <xTaskRemoveFromEventList+0xbc>)
 800312a:	f7fe fd94 	bl	8001c56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <xTaskRemoveFromEventList+0xc0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	429a      	cmp	r2, r3
 800313a:	d905      	bls.n	8003148 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003140:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <xTaskRemoveFromEventList+0xc4>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e001      	b.n	800314c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800314c:	697b      	ldr	r3, [r7, #20]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000414 	.word	0x20000414
 800315c:	200003f4 	.word	0x200003f4
 8003160:	200002f0 	.word	0x200002f0
 8003164:	200003ac 	.word	0x200003ac
 8003168:	200002ec 	.word	0x200002ec
 800316c:	20000400 	.word	0x20000400

08003170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <vTaskInternalSetTimeOutState+0x24>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <vTaskInternalSetTimeOutState+0x28>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	605a      	str	r2, [r3, #4]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000404 	.word	0x20000404
 8003198:	200003f0 	.word	0x200003f0

0800319c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	613b      	str	r3, [r7, #16]
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	60fb      	str	r3, [r7, #12]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80031e2:	f000 fc3b 	bl	8003a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <xTaskCheckForTimeOut+0xc0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d102      	bne.n	8003206 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	e023      	b.n	800324e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <xTaskCheckForTimeOut+0xc4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d007      	beq.n	8003222 <xTaskCheckForTimeOut+0x86>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	e015      	b.n	800324e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	d20b      	bcs.n	8003244 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff99 	bl	8003170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e004      	b.n	800324e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800324e:	f000 fc35 	bl	8003abc <vPortExitCritical>

	return xReturn;
 8003252:	69fb      	ldr	r3, [r7, #28]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200003f0 	.word	0x200003f0
 8003260:	20000404 	.word	0x20000404

08003264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <vTaskMissedYield+0x14>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000400 	.word	0x20000400

0800327c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003284:	f000 f852 	bl	800332c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003288:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <prvIdleTask+0x28>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d9f9      	bls.n	8003284 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003290:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <prvIdleTask+0x2c>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032a0:	e7f0      	b.n	8003284 <prvIdleTask+0x8>
 80032a2:	bf00      	nop
 80032a4:	200002f0 	.word	0x200002f0
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	e00c      	b.n	80032d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4a12      	ldr	r2, [pc, #72]	@ (800330c <prvInitialiseTaskLists+0x60>)
 80032c4:	4413      	add	r3, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fc9a 	bl	8001c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d9ef      	bls.n	80032b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032d8:	480d      	ldr	r0, [pc, #52]	@ (8003310 <prvInitialiseTaskLists+0x64>)
 80032da:	f7fe fc91 	bl	8001c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032de:	480d      	ldr	r0, [pc, #52]	@ (8003314 <prvInitialiseTaskLists+0x68>)
 80032e0:	f7fe fc8e 	bl	8001c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032e4:	480c      	ldr	r0, [pc, #48]	@ (8003318 <prvInitialiseTaskLists+0x6c>)
 80032e6:	f7fe fc8b 	bl	8001c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032ea:	480c      	ldr	r0, [pc, #48]	@ (800331c <prvInitialiseTaskLists+0x70>)
 80032ec:	f7fe fc88 	bl	8001c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032f0:	480b      	ldr	r0, [pc, #44]	@ (8003320 <prvInitialiseTaskLists+0x74>)
 80032f2:	f7fe fc85 	bl	8001c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <prvInitialiseTaskLists+0x78>)
 80032f8:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <prvInitialiseTaskLists+0x64>)
 80032fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003328 <prvInitialiseTaskLists+0x7c>)
 80032fe:	4a05      	ldr	r2, [pc, #20]	@ (8003314 <prvInitialiseTaskLists+0x68>)
 8003300:	601a      	str	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200002f0 	.word	0x200002f0
 8003310:	2000037c 	.word	0x2000037c
 8003314:	20000390 	.word	0x20000390
 8003318:	200003ac 	.word	0x200003ac
 800331c:	200003c0 	.word	0x200003c0
 8003320:	200003d8 	.word	0x200003d8
 8003324:	200003a4 	.word	0x200003a4
 8003328:	200003a8 	.word	0x200003a8

0800332c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003332:	e019      	b.n	8003368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003334:	f000 fb92 	bl	8003a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003338:	4b10      	ldr	r3, [pc, #64]	@ (800337c <prvCheckTasksWaitingTermination+0x50>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fce1 	bl	8001d0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800334a:	4b0d      	ldr	r3, [pc, #52]	@ (8003380 <prvCheckTasksWaitingTermination+0x54>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <prvCheckTasksWaitingTermination+0x54>)
 8003352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <prvCheckTasksWaitingTermination+0x58>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3b01      	subs	r3, #1
 800335a:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <prvCheckTasksWaitingTermination+0x58>)
 800335c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800335e:	f000 fbad 	bl	8003abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f810 	bl	8003388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <prvCheckTasksWaitingTermination+0x58>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e1      	bne.n	8003334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200003c0 	.word	0x200003c0
 8003380:	200003ec 	.word	0x200003ec
 8003384:	200003d4 	.word	0x200003d4

08003388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fd2c 	bl	8003dfc <vPortFree>
				vPortFree( pxTCB );
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fd29 	bl	8003dfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033aa:	e019      	b.n	80033e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d103      	bne.n	80033be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fd20 	bl	8003dfc <vPortFree>
	}
 80033bc:	e010      	b.n	80033e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d00b      	beq.n	80033e0 <prvDeleteTCB+0x58>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	60fb      	str	r3, [r7, #12]
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <prvDeleteTCB+0x54>
	}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <prvResetNextTaskUnblockTime+0x38>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003424 <prvResetNextTaskUnblockTime+0x3c>)
 80033fa:	f04f 32ff 	mov.w	r2, #4294967295
 80033fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003400:	e008      	b.n	8003414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <prvResetNextTaskUnblockTime+0x38>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <prvResetNextTaskUnblockTime+0x3c>)
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	200003a4 	.word	0x200003a4
 8003424:	2000040c 	.word	0x2000040c

08003428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800342e:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <xTaskGetSchedulerState+0x34>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003436:	2301      	movs	r3, #1
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	e008      	b.n	800344e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800343c:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <xTaskGetSchedulerState+0x38>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003444:	2302      	movs	r3, #2
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	e001      	b.n	800344e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800344e:	687b      	ldr	r3, [r7, #4]
	}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	200003f8 	.word	0x200003f8
 8003460:	20000414 	.word	0x20000414

08003464 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d05e      	beq.n	8003538 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347e:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <xTaskPriorityInherit+0xe0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	429a      	cmp	r2, r3
 8003486:	d24e      	bcs.n	8003526 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db06      	blt.n	800349e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003490:	4b2c      	ldr	r3, [pc, #176]	@ (8003544 <xTaskPriorityInherit+0xe0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	f1c3 0207 	rsb	r2, r3, #7
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6959      	ldr	r1, [r3, #20]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4a26      	ldr	r2, [pc, #152]	@ (8003548 <xTaskPriorityInherit+0xe4>)
 80034b0:	4413      	add	r3, r2
 80034b2:	4299      	cmp	r1, r3
 80034b4:	d12f      	bne.n	8003516 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fc26 	bl	8001d0c <uxListRemove>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <xTaskPriorityInherit+0xe8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4013      	ands	r3, r2
 80034d8:	4a1c      	ldr	r2, [pc, #112]	@ (800354c <xTaskPriorityInherit+0xe8>)
 80034da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034dc:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <xTaskPriorityInherit+0xe0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	2201      	movs	r2, #1
 80034ec:	409a      	lsls	r2, r3
 80034ee:	4b17      	ldr	r3, [pc, #92]	@ (800354c <xTaskPriorityInherit+0xe8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <xTaskPriorityInherit+0xe8>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <xTaskPriorityInherit+0xe4>)
 8003506:	441a      	add	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7fe fba1 	bl	8001c56 <vListInsertEnd>
 8003514:	e004      	b.n	8003520 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003516:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <xTaskPriorityInherit+0xe0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e008      	b.n	8003538 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <xTaskPriorityInherit+0xe0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d201      	bcs.n	8003538 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003538:	68fb      	ldr	r3, [r7, #12]
	}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200002ec 	.word	0x200002ec
 8003548:	200002f0 	.word	0x200002f0
 800354c:	200003f4 	.word	0x200003f4

08003550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d070      	beq.n	8003648 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003566:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <xTaskPriorityDisinherit+0x104>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d00b      	beq.n	8003588 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	60fb      	str	r3, [r7, #12]
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60bb      	str	r3, [r7, #8]
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ac:	1e5a      	subs	r2, r3, #1
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d044      	beq.n	8003648 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d140      	bne.n	8003648 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fb9e 	bl	8001d0c <uxListRemove>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d115      	bne.n	8003602 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035da:	491f      	ldr	r1, [pc, #124]	@ (8003658 <xTaskPriorityDisinherit+0x108>)
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xTaskPriorityDisinherit+0xb2>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	2201      	movs	r2, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	4b18      	ldr	r3, [pc, #96]	@ (800365c <xTaskPriorityDisinherit+0x10c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4013      	ands	r3, r2
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <xTaskPriorityDisinherit+0x10c>)
 8003600:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	f1c3 0207 	rsb	r2, r3, #7
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	2201      	movs	r2, #1
 800361c:	409a      	lsls	r2, r3
 800361e:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <xTaskPriorityDisinherit+0x10c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <xTaskPriorityDisinherit+0x10c>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4a08      	ldr	r2, [pc, #32]	@ (8003658 <xTaskPriorityDisinherit+0x108>)
 8003636:	441a      	add	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe fb09 	bl	8001c56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003644:	2301      	movs	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003648:	697b      	ldr	r3, [r7, #20]
	}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200002ec 	.word	0x200002ec
 8003658:	200002f0 	.word	0x200002f0
 800365c:	200003f4 	.word	0x200003f4

08003660 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d079      	beq.n	800376c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	60fb      	str	r3, [r7, #12]
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d902      	bls.n	80036a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e002      	b.n	80036ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d059      	beq.n	800376c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d154      	bne.n	800376c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80036c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003774 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d10b      	bne.n	80036e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	60bb      	str	r3, [r7, #8]
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db04      	blt.n	8003702 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f1c3 0207 	rsb	r2, r3, #7
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6959      	ldr	r1, [r3, #20]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4a19      	ldr	r2, [pc, #100]	@ (8003778 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003712:	4413      	add	r3, r2
 8003714:	4299      	cmp	r1, r3
 8003716:	d129      	bne.n	800376c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3304      	adds	r3, #4
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe faf5 	bl	8001d0c <uxListRemove>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4013      	ands	r3, r2
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800373c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	2201      	movs	r2, #1
 8003744:	409a      	lsls	r2, r3
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	4a0b      	ldr	r2, [pc, #44]	@ (800377c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4a06      	ldr	r2, [pc, #24]	@ (8003778 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800375e:	441a      	add	r2, r3
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7fe fa75 	bl	8001c56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200002ec 	.word	0x200002ec
 8003778:	200002f0 	.word	0x200002f0
 800377c:	200003f4 	.word	0x200003f4

08003780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003784:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003792:	3201      	adds	r2, #1
 8003794:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003796:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003798:	681b      	ldr	r3, [r3, #0]
	}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200002ec 	.word	0x200002ec

080037a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037b2:	4b29      	ldr	r3, [pc, #164]	@ (8003858 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037b8:	4b28      	ldr	r3, [pc, #160]	@ (800385c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3304      	adds	r3, #4
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe faa4 	bl	8001d0c <uxListRemove>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037ca:	4b24      	ldr	r3, [pc, #144]	@ (800385c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	2201      	movs	r2, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43da      	mvns	r2, r3
 80037d8:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4013      	ands	r3, r2
 80037de:	4a20      	ldr	r2, [pc, #128]	@ (8003860 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d10a      	bne.n	8003800 <prvAddCurrentTaskToDelayedList+0x58>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f0:	4b1a      	ldr	r3, [pc, #104]	@ (800385c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	481a      	ldr	r0, [pc, #104]	@ (8003864 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037fa:	f7fe fa2c 	bl	8001c56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037fe:	e026      	b.n	800384e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003808:	4b14      	ldr	r3, [pc, #80]	@ (800385c <prvAddCurrentTaskToDelayedList+0xb4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	d209      	bcs.n	800382c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <prvAddCurrentTaskToDelayedList+0xc0>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <prvAddCurrentTaskToDelayedList+0xb4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe fa39 	bl	8001c9c <vListInsert>
}
 800382a:	e010      	b.n	800384e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800382c:	4b0f      	ldr	r3, [pc, #60]	@ (800386c <prvAddCurrentTaskToDelayedList+0xc4>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe fa2f 	bl	8001c9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d202      	bcs.n	800384e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003848:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6013      	str	r3, [r2, #0]
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200003f0 	.word	0x200003f0
 800385c:	200002ec 	.word	0x200002ec
 8003860:	200003f4 	.word	0x200003f4
 8003864:	200003d8 	.word	0x200003d8
 8003868:	200003a8 	.word	0x200003a8
 800386c:	200003a4 	.word	0x200003a4
 8003870:	2000040c 	.word	0x2000040c

08003874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3b04      	subs	r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800388c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b04      	subs	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b04      	subs	r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038a4:	4a08      	ldr	r2, [pc, #32]	@ (80038c8 <pxPortInitialiseStack+0x54>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b14      	subs	r3, #20
 80038ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b20      	subs	r3, #32
 80038ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038bc:	68fb      	ldr	r3, [r7, #12]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	080038cd 	.word	0x080038cd

080038cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038d6:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <prvTaskExitError+0x54>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d00b      	beq.n	80038f8 <prvTaskExitError+0x2c>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60fb      	str	r3, [r7, #12]
}
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <prvTaskExitError+0x28>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60bb      	str	r3, [r7, #8]
}
 800390a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800390c:	bf00      	nop
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0fc      	beq.n	800390e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000010 	.word	0x20000010
	...

08003930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003930:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <pxCurrentTCBConst2>)
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	6808      	ldr	r0, [r1, #0]
 8003936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800393a:	f380 8809 	msr	PSP, r0
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f380 8811 	msr	BASEPRI, r0
 800394a:	f04e 0e0d 	orr.w	lr, lr, #13
 800394e:	4770      	bx	lr

08003950 <pxCurrentTCBConst2>:
 8003950:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop

08003958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003958:	4806      	ldr	r0, [pc, #24]	@ (8003974 <prvPortStartFirstTask+0x1c>)
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f380 8808 	msr	MSP, r0
 8003962:	b662      	cpsie	i
 8003964:	b661      	cpsie	f
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	df00      	svc	0
 8003970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003972:	bf00      	nop
 8003974:	e000ed08 	.word	0xe000ed08

08003978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800397e:	4b32      	ldr	r3, [pc, #200]	@ (8003a48 <xPortStartScheduler+0xd0>)
 8003980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	@ 0xff
 800398e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <xPortStartScheduler+0xd4>)
 80039a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039a8:	2207      	movs	r2, #7
 80039aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ac:	e009      	b.n	80039c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039ae:	4b28      	ldr	r3, [pc, #160]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	4a26      	ldr	r2, [pc, #152]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b80      	cmp	r3, #128	@ 0x80
 80039cc:	d0ef      	beq.n	80039ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039ce:	4b20      	ldr	r3, [pc, #128]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d00b      	beq.n	80039f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60bb      	str	r3, [r7, #8]
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	e7fd      	b.n	80039ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039f2:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039fc:	4b14      	ldr	r3, [pc, #80]	@ (8003a50 <xPortStartScheduler+0xd8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a04:	4a12      	ldr	r2, [pc, #72]	@ (8003a50 <xPortStartScheduler+0xd8>)
 8003a06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a10:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <xPortStartScheduler+0xdc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	@ (8003a54 <xPortStartScheduler+0xdc>)
 8003a16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <xPortStartScheduler+0xdc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0c      	ldr	r2, [pc, #48]	@ (8003a54 <xPortStartScheduler+0xdc>)
 8003a22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a28:	f000 f8b8 	bl	8003b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <xPortStartScheduler+0xe0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a32:	f7ff ff91 	bl	8003958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a36:	f7ff fab5 	bl	8002fa4 <vTaskSwitchContext>
	prvTaskExitError();
 8003a3a:	f7ff ff47 	bl	80038cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	e000e400 	.word	0xe000e400
 8003a4c:	20000418 	.word	0x20000418
 8003a50:	2000041c 	.word	0x2000041c
 8003a54:	e000ed20 	.word	0xe000ed20
 8003a58:	20000010 	.word	0x20000010

08003a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	607b      	str	r3, [r7, #4]
}
 8003a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a76:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <vPortEnterCritical+0x58>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab4 <vPortEnterCritical+0x58>)
 8003a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a80:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <vPortEnterCritical+0x58>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d110      	bne.n	8003aaa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <vPortEnterCritical+0x5c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <vPortEnterCritical+0x4e>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <vPortEnterCritical+0x4a>
	}
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	20000010 	.word	0x20000010
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <vPortExitCritical+0x50>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <vPortExitCritical+0x26>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	607b      	str	r3, [r7, #4]
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	e7fd      	b.n	8003ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <vPortExitCritical+0x50>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <vPortExitCritical+0x50>)
 8003aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003aec:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <vPortExitCritical+0x50>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <vPortExitCritical+0x44>
 8003af4:	2300      	movs	r3, #0
 8003af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f383 8811 	msr	BASEPRI, r3
}
 8003afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000010 	.word	0x20000010

08003b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b10:	f3ef 8009 	mrs	r0, PSP
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	4b0d      	ldr	r3, [pc, #52]	@ (8003b50 <pxCurrentTCBConst>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b20:	6010      	str	r0, [r2, #0]
 8003b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b2a:	f380 8811 	msr	BASEPRI, r0
 8003b2e:	f7ff fa39 	bl	8002fa4 <vTaskSwitchContext>
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f380 8811 	msr	BASEPRI, r0
 8003b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b46:	f380 8809 	msr	PSP, r0
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	4770      	bx	lr

08003b50 <pxCurrentTCBConst>:
 8003b50:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop

08003b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	607b      	str	r3, [r7, #4]
}
 8003b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b72:	f7ff f95d 	bl	8002e30 <xTaskIncrementTick>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <SysTick_Handler+0x40>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f383 8811 	msr	BASEPRI, r3
}
 8003b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <vPortSetupTimerInterrupt+0x30>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <vPortSetupTimerInterrupt+0x34>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <vPortSetupTimerInterrupt+0x38>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <vPortSetupTimerInterrupt+0x3c>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <vPortSetupTimerInterrupt+0x40>)
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bbe:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <vPortSetupTimerInterrupt+0x30>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	e000e010 	.word	0xe000e010
 8003bd0:	e000e018 	.word	0xe000e018
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	10624dd3 	.word	0x10624dd3
 8003bdc:	e000e014 	.word	0xe000e014

08003be0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003be6:	f3ef 8305 	mrs	r3, IPSR
 8003bea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	d915      	bls.n	8003c1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bf2:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <vPortValidateInterruptPriority+0x70>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bfc:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <vPortValidateInterruptPriority+0x74>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	7afa      	ldrb	r2, [r7, #11]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d20b      	bcs.n	8003c1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	607b      	str	r3, [r7, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <vPortValidateInterruptPriority+0x78>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <vPortValidateInterruptPriority+0x7c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d90b      	bls.n	8003c46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	603b      	str	r3, [r7, #0]
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <vPortValidateInterruptPriority+0x62>
	}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	e000e3f0 	.word	0xe000e3f0
 8003c54:	20000418 	.word	0x20000418
 8003c58:	e000ed0c 	.word	0xe000ed0c
 8003c5c:	2000041c 	.word	0x2000041c

08003c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c6c:	f7ff f834 	bl	8002cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c70:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <pvPortMalloc+0x184>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c78:	f000 f924 	bl	8003ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003de8 <pvPortMalloc+0x188>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f040 8095 	bne.w	8003db4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01e      	beq.n	8003cce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c90:	2208      	movs	r2, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f023 0307 	bic.w	r3, r3, #7
 8003ca8:	3308      	adds	r3, #8
 8003caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <pvPortMalloc+0x6e>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	617b      	str	r3, [r7, #20]
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d06f      	beq.n	8003db4 <pvPortMalloc+0x154>
 8003cd4:	4b45      	ldr	r3, [pc, #276]	@ (8003dec <pvPortMalloc+0x18c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d86a      	bhi.n	8003db4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cde:	4b44      	ldr	r3, [pc, #272]	@ (8003df0 <pvPortMalloc+0x190>)
 8003ce0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ce2:	4b43      	ldr	r3, [pc, #268]	@ (8003df0 <pvPortMalloc+0x190>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ce8:	e004      	b.n	8003cf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d903      	bls.n	8003d06 <pvPortMalloc+0xa6>
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f1      	bne.n	8003cea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d06:	4b37      	ldr	r3, [pc, #220]	@ (8003de4 <pvPortMalloc+0x184>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d051      	beq.n	8003db4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4413      	add	r3, r2
 8003d18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1ad2      	subs	r2, r2, r3
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d920      	bls.n	8003d74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <pvPortMalloc+0xfc>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d6e:	69b8      	ldr	r0, [r7, #24]
 8003d70:	f000 f90a 	bl	8003f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <pvPortMalloc+0x18c>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dec <pvPortMalloc+0x18c>)
 8003d80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d82:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <pvPortMalloc+0x18c>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <pvPortMalloc+0x194>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d203      	bcs.n	8003d96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <pvPortMalloc+0x18c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <pvPortMalloc+0x194>)
 8003d94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <pvPortMalloc+0x188>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003daa:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <pvPortMalloc+0x198>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a11      	ldr	r2, [pc, #68]	@ (8003df8 <pvPortMalloc+0x198>)
 8003db2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003db4:	f7fe ff9e 	bl	8002cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <pvPortMalloc+0x17a>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60fb      	str	r3, [r7, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <pvPortMalloc+0x176>
	return pvReturn;
 8003dda:	69fb      	ldr	r3, [r7, #28]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	@ 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20001028 	.word	0x20001028
 8003de8:	2000103c 	.word	0x2000103c
 8003dec:	2000102c 	.word	0x2000102c
 8003df0:	20001020 	.word	0x20001020
 8003df4:	20001030 	.word	0x20001030
 8003df8:	20001034 	.word	0x20001034

08003dfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04f      	beq.n	8003eae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e0e:	2308      	movs	r3, #8
 8003e10:	425b      	negs	r3, r3
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4413      	add	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <vPortFree+0xbc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <vPortFree+0x46>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60fb      	str	r3, [r7, #12]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <vPortFree+0x66>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60bb      	str	r3, [r7, #8]
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4b14      	ldr	r3, [pc, #80]	@ (8003eb8 <vPortFree+0xbc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01e      	beq.n	8003eae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11a      	bne.n	8003eae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <vPortFree+0xbc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e88:	f7fe ff26 	bl	8002cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <vPortFree+0xc0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	4a09      	ldr	r2, [pc, #36]	@ (8003ebc <vPortFree+0xc0>)
 8003e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e9a:	6938      	ldr	r0, [r7, #16]
 8003e9c:	f000 f874 	bl	8003f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <vPortFree+0xc4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a06      	ldr	r2, [pc, #24]	@ (8003ec0 <vPortFree+0xc4>)
 8003ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eaa:	f7fe ff23 	bl	8002cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000103c 	.word	0x2000103c
 8003ebc:	2000102c 	.word	0x2000102c
 8003ec0:	20001038 	.word	0x20001038

08003ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ed0:	4b27      	ldr	r3, [pc, #156]	@ (8003f70 <prvHeapInit+0xac>)
 8003ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0307 	bic.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f70 <prvHeapInit+0xac>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <prvHeapInit+0xb0>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <prvHeapInit+0xb0>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f10:	2208      	movs	r2, #8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <prvHeapInit+0xb4>)
 8003f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f26:	4b14      	ldr	r3, [pc, #80]	@ (8003f78 <prvHeapInit+0xb4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <prvHeapInit+0xb4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <prvHeapInit+0xb4>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <prvHeapInit+0xb8>)
 8003f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <prvHeapInit+0xbc>)
 8003f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <prvHeapInit+0xc0>)
 8003f5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f62:	601a      	str	r2, [r3, #0]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000420 	.word	0x20000420
 8003f74:	20001020 	.word	0x20001020
 8003f78:	20001028 	.word	0x20001028
 8003f7c:	20001030 	.word	0x20001030
 8003f80:	2000102c 	.word	0x2000102c
 8003f84:	2000103c 	.word	0x2000103c

08003f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f90:	4b27      	ldr	r3, [pc, #156]	@ (8004030 <prvInsertBlockIntoFreeList+0xa8>)
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e002      	b.n	8003f9c <prvInsertBlockIntoFreeList+0x14>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d8f7      	bhi.n	8003f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d108      	bne.n	8003fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	441a      	add	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	441a      	add	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d118      	bne.n	8004010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b14      	ldr	r3, [pc, #80]	@ (8004034 <prvInsertBlockIntoFreeList+0xac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d00d      	beq.n	8004006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e008      	b.n	8004018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <prvInsertBlockIntoFreeList+0xac>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e003      	b.n	8004018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d002      	beq.n	8004026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	20001020 	.word	0x20001020
 8004034:	20001028 	.word	0x20001028

08004038 <memset>:
 8004038:	4603      	mov	r3, r0
 800403a:	4402      	add	r2, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	2600      	movs	r6, #0
 800404c:	4d0c      	ldr	r5, [pc, #48]	@ (8004080 <__libc_init_array+0x38>)
 800404e:	4c0d      	ldr	r4, [pc, #52]	@ (8004084 <__libc_init_array+0x3c>)
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	f000 f828 	bl	80040ac <_init>
 800405c:	2600      	movs	r6, #0
 800405e:	4d0a      	ldr	r5, [pc, #40]	@ (8004088 <__libc_init_array+0x40>)
 8004060:	4c0a      	ldr	r4, [pc, #40]	@ (800408c <__libc_init_array+0x44>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	f855 3b04 	ldr.w	r3, [r5], #4
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	080041a0 	.word	0x080041a0
 8004084:	080041a0 	.word	0x080041a0
 8004088:	080041a0 	.word	0x080041a0
 800408c:	080041a4 	.word	0x080041a4

08004090 <memcpy>:
 8004090:	440a      	add	r2, r1
 8004092:	4291      	cmp	r1, r2
 8004094:	f100 33ff 	add.w	r3, r0, #4294967295
 8004098:	d100      	bne.n	800409c <memcpy+0xc>
 800409a:	4770      	bx	lr
 800409c:	b510      	push	{r4, lr}
 800409e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040a2:	4291      	cmp	r1, r2
 80040a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a8:	d1f9      	bne.n	800409e <memcpy+0xe>
 80040aa:	bd10      	pop	{r4, pc}

080040ac <_init>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr

080040b8 <_fini>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr
